<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>读心悦 Blog</title>
        <link>https://duxinyues.github.io/reading</link>
        <description>读心悦 Blog</description>
        <lastBuildDate>Mon, 20 Mar 2023 14:44:21 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-Hans</language>
        <item>
            <title><![CDATA[《计算机组成原理》]]></title>
            <link>https://duxinyues.github.io/reading/计算机组成原理</link>
            <guid>https://duxinyues.github.io/reading/计算机组成原理</guid>
            <pubDate>Mon, 20 Mar 2023 14:44:21 GMT</pubDate>
            <description><![CDATA[<!--]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="计算机概论">计算机概论<a href="#计算机概论" class="hash-link" aria-label="计算机概论的直接链接" title="计算机概论的直接链接">​</a></h2><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="计算机的发展历程">计算机的发展历程<a href="#计算机的发展历程" class="hash-link" aria-label="计算机的发展历程的直接链接" title="计算机的发展历程的直接链接">​</a></h3><ol><li>1946年第一台点子数字积分计算机【电子管时代】，逻辑元件采用电子管；使用机器语言进行编辑；主存用延迟或者磁鼓存储信息，容量极小，体积大，成本高，运算速度低。</li><li>晶体管时代【1958年~1964年】，逻辑元件采用晶体管，运算速度达到了每秒几万到几十万；主存采用磁芯存储器，软件开始使用高级语言开发</li><li>中小规模的集成电路时代【1965年~1972年】，逻辑元件采用了中小规模的集成电路；半导体存储器开发取代了磁芯存储器；高级语言和操作系统得到迅速发展。开始有了分时操作系统。</li><li>超大集成电路时代【1972年至今】，逻辑元件采用了大规模集成电路和超大规模集成电路，产生可微处理器，半导体存储完全取代了磁芯存储器。</li></ol><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="计算机硬件">计算机硬件<a href="#计算机硬件" class="hash-link" aria-label="计算机硬件的直接链接" title="计算机硬件的直接链接">​</a></h3><p>计算机硬件由运算器、存储器、控制器、输入设备和输出设备组成：</p><p><img loading="lazy" alt="在这里插入图片描述" src="/assets/images/2023-03-23_13-54-06-ba1353a5b489b69eba81130980ddaac9.png" width="926" height="491" class="img_ev3q"></p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="运算器">运算器<a href="#运算器" class="hash-link" aria-label="运算器的直接链接" title="运算器的直接链接">​</a></h4><p> 运算器是在控制器的指令下，对数据或者信息进行处理和运算，这就是算术逻辑运算单元</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="控制器">控制器<a href="#控制器" class="hash-link" aria-label="控制器的直接链接" title="控制器的直接链接">​</a></h4><p>控制器是计算机的控制中心，用来实现计算机本身运算过程的自动化。它控制计算机各个部件按照指令功能进行所需的操作。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="存储器">存储器<a href="#存储器" class="hash-link" aria-label="存储器的直接链接" title="存储器的直接链接">​</a></h4><p>存储器是计算机用来存储程序和数据的记忆部件。是计算机各种信息数据存放和交流中心。</p><p>存储器是在控制器的指挥下按照指定的地址存入或者取出数据。</p><p>（1）、主存【内存】是由CPU直接访问的存储器，存放着正在运行的程序和数据，也可以存放计算结果或者中间结果。因为主存直接和运算器、控制器交换数据，所以要求存取速度快。现在计算机的主存采用了大规模集成电路制作成的半导体存储器，它的优点是存储容量大、体积小、重量轻、存取 速度快。</p><p>（2）、高速缓存【Cache】，存取速度比主存快，但是CPU内部的寄存器慢，容量小，经常被放置在CPU和主存之间。</p><p>（3）、外存是计算机的外围设备，用来存储大量暂时不需要参与计算的数据或者程序。所以允许存取速度慢。比如磁盘存储器、磁带存储器、光盘存储器。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="输入和输出设备">输入和输出设备<a href="#输入和输出设备" class="hash-link" aria-label="输入和输出设备的直接链接" title="输入和输出设备的直接链接">​</a></h4><p>输入和输出设备是计算机和外界联系的桥梁。</p><p>输入设备：键盘、鼠标、扫描仪等等。
输出设备：显示器、打印机、绘图仪等等。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="总线">总线<a href="#总线" class="hash-link" aria-label="总线的直接链接" title="总线的直接链接">​</a></h4><p>总线是一组由多个功能部件共享的公共信息传送线路。比如：</p><p><img loading="lazy" src="/assets/images/Snipaste_2023-03-23_18-13-05-7db3c20ba2bdea8bbbaa3dd7395641d7.png" width="1087" height="511" class="img_ev3q"></p><p>总线一般包含3组：地址总线、数据总线和控制总线。</p><p>地址总线是单向的，CPU用它来传送主存单元地址或者输入/输出端口地址。</p><p>数据总线主要是用于传送各个大部分部件之间的数据信息。比如数字、命令字和状态字。</p><p>控制总线是用于传送控制信号和时序信号。</p><hr><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="计算机软件">计算机软件<a href="#计算机软件" class="hash-link" aria-label="计算机软件的直接链接" title="计算机软件的直接链接">​</a></h3><hr><p>计算机软件是计算机系统的重要组成部分，软件将各种计算机的指令组合起来，让计算机硬件部分能够正常工作。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="计算机软件分类">计算机软件分类<a href="#计算机软件分类" class="hash-link" aria-label="计算机软件分类的直接链接" title="计算机软件分类的直接链接">​</a></h4><p>软件分为系统软件和应用软件。</p><p>系统软是一组保证计算机系统高效、正确运行的基础软件，一般作为操作系统资源提供给用户使用的。比如操作系统、语言处理系统，数据管理系统、分布式软件系统、网络软件系统。</p><p>注意：数据库管理系统和数据库系统是有区别的：数据库管理系统是用户和操作系统之间的一层数据管理软件；数据库系统是计算机系统中引入数据库后的系统。</p><p>应用软件：用户为了解决某一个应用领域的问题而开发的程序，包括了科学计算类软件、工程设计类软件、数据统计与处理软件、情报检索软件、企业管理软件等等。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="程序设计语言">程序设计语言<a href="#程序设计语言" class="hash-link" aria-label="程序设计语言的直接链接" title="程序设计语言的直接链接">​</a></h4><p>计算机的程序设计语言分为机器语言、汇编语言和高级语言</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="机器语言">机器语言<a href="#机器语言" class="hash-link" aria-label="机器语言的直接链接" title="机器语言的直接链接">​</a></h5><p>极其语言是一种二进制语言，使用二进制来描述机器指令。机器语言是计算机唯一能够识别、直接执行的一种一种语言，所以运行速度很快，但是机器语言编写的程序不直观、难懂、难写、难以修改和维护。</p><p>另外机器语言是每一种计算机所固有的，不同类型的计算机，它的指令有所不同，那么针对某一种类型计算机编写的程序就不能再另一种类型计算机上运行。也就是机器语言程序没有通用性。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="汇编语言">汇编语言<a href="#汇编语言" class="hash-link" aria-label="汇编语言的直接链接" title="汇编语言的直接链接">​</a></h5><p>汇编语言和机器语言基本上是一一对应的，在表示方法上有所改变，汇编语言使用了一种助记符来代替操作码，用符号来表示操作数地址。</p><p>助记符通常是指令功能英文单词的缩写，比如：ADD表示加法。</p><p>汇编语言也机器语言一样，也是面向机器的程序设计语言，通用性很差。所以汇编语言也是低级语言。</p><h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="高级语言">高级语言<a href="#高级语言" class="hash-link" aria-label="高级语言的直接链接" title="高级语言的直接链接">​</a></h5><p>高级语言是为了让程序语言更加贴近人类的自然语言，同时又不依赖于计算机硬件。比如C语言、C++、Java等等。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="计算机系统层次结构">计算机系统层次结构<a href="#计算机系统层次结构" class="hash-link" aria-label="计算机系统层次结构的直接链接" title="计算机系统层次结构的直接链接">​</a></h3><p>计算机系统分层次大致如下图：</p><p><img loading="lazy" src="/assets/images/Snipaste_2023-03-25_22-50-27-f675fb8b28a81cf932f47262401e6c82.png" width="1063" height="763" class="img_ev3q"></p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="计算机性能指标">计算机性能指标<a href="#计算机性能指标" class="hash-link" aria-label="计算机性能指标的直接链接" title="计算机性能指标的直接链接">​</a></h3><ol><li><p>主频：CPU工作节奏是通过时钟来控制的，时钟产生的固定频率就是CPU的主频，单位是兆赫兹(MHz)、GHz。</p></li><li><p>CPU时时钟周期是主频的倒数</p></li><li><p>CPI是执行一条指令需要的周期，计算公式是：CPI= 某段程序执行需要的CPU时钟周期 / 程序包含的指令条数</p></li><li><p>CPU执行时间，就是运行一个程序所花费的时间，计算公式：<code>T =  执行程序的指令总数 *  CPI  * CPU时时钟周期</code></p></li><li><p>运算速度：每秒执行多少条指令</p></li><li><p>基本字长：直接参与运算的数据的二进制位数，它决定了寄存器、ALU、数据总线的位数，直接影响到硬件的造价。位数越多精度越高。一般字长都是字节的1、2、4、8倍。微型计算机的字长为8位、16位、32位、64位。</p></li><li><p>主存容量：主存中能够存储的信息总字节数。【字节作为一个单位来处理二进制的数位，以8个二进制位作为一个字节，1024B = 1KB】</p></li><li><p>主存存取周期：就是连续两次访问主存所允许的最小时间间隔。</p></li></ol><hr><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="数据表示">数据表示<a href="#数据表示" class="hash-link" aria-label="数据表示的直接链接" title="数据表示的直接链接">​</a></h2><p>数据是计算机加工处理的对象，分为数值数据和非数值数据</p><p>数值数据就是1233，具有“量的概念”</p><p>非数值数据，比如字母和符号，</p><p>数据在计算机中，都是以二进制数码表示的。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="编码">编码<a href="#编码" class="hash-link" aria-label="编码的直接链接" title="编码的直接链接">​</a></h3><p>将信息从一种形式转化为另一种形式的符号系统，一般是选用少量最简单的基本符号集合一定的组合规则，来表示大量复杂多样的信息。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="字符和字符串">字符和字符串<a href="#字符和字符串" class="hash-link" aria-label="字符和字符串的直接链接" title="字符和字符串的直接链接">​</a></h3><p>字符是按照一定规则使用一组二进制编码来表示。比如ASCII码</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="字符串的存放">字符串的存放<a href="#字符串的存放" class="hash-link" aria-label="字符串的存放的直接链接" title="字符串的存放的直接链接">​</a></h3><p>字符串就是一串字符，它们占用主存中连续的多个字节，每一个字节存储一个字符。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="汉字编码">汉字编码<a href="#汉字编码" class="hash-link" aria-label="汉字编码的直接链接" title="汉字编码的直接链接">​</a></h3><p>汉字编码分为机内码和机外码</p><p>机内码：在计算机内部使用的二进制数表示的汉字编码，用于在计算机内部存储、交换、处理加工汉字信息。</p><p>机外码：不再计算机内部使用的汉字编码，主要是汉字输入码和汉字字模码</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="校验码">校验码<a href="#校验码" class="hash-link" aria-label="校验码的直接链接" title="校验码的直接链接">​</a></h3><p>能够自动发现或者纠错的数据编码。常用三种校验码：奇偶校验码、海明校验码和循环冗余校验码。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="真值和机器数">真值和机器数<a href="#真值和机器数" class="hash-link" aria-label="真值和机器数的直接链接" title="真值和机器数的直接链接">​</a></h3><p>带有正负号的数称为真值；采用数的符号和数值一起编码的方法来表示数据，比如用0表示正，用1表示负，那么0101就是5。这样的数字就是机器数。</p><p>通常有原码、反码、补码和移码表示法。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="定点数的表示">定点数的表示<a href="#定点数的表示" class="hash-link" aria-label="定点数的表示的直接链接" title="定点数的表示的直接链接">​</a></h3><p>在计算机中，小数点是按照约定的方式标出。有两种方式：</p><ol><li>约定所有数据的小数点位置固定不变，就是定点表示；</li><li>约定小数点的位置是可以浮动的，就是浮点表示</li></ol><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="无符号数和有符号数">无符号数和有符号数<a href="#无符号数和有符号数" class="hash-link" aria-label="无符号数和有符号数的直接链接" title="无符号数和有符号数的直接链接">​</a></h4><p>无符号数：对于字长为n位的无符号数的表示范围：0~2的n-1次方</p><p>有符号数：将数的符号码化，一般规定二进制的最高位为符号位，最高位是0的话，那么该数是正数；最高位是1表示为负数。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="机器数的定点表示">机器数的定点表示<a href="#机器数的定点表示" class="hash-link" aria-label="机器数的定点表示的直接链接" title="机器数的定点表示的直接链接">​</a></h4>]]></content:encoded>
            <author>yongyuan253015@gmail.com (读心悦)</author>
            <category>悦读</category>
        </item>
        <item>
            <title><![CDATA[《JavaScript百炼成仙》]]></title>
            <link>https://duxinyues.github.io/reading/《JavaScript百炼成仙》</link>
            <guid>https://duxinyues.github.io/reading/《JavaScript百炼成仙》</guid>
            <pubDate>Sun, 19 Feb 2023 14:01:20 GMT</pubDate>
            <description><![CDATA[<!--]]></description>
            <content:encoded><![CDATA[<p><strong>编程之修，重在积累，而非资质。资质虽然重要，可是后天的努力更不可少</strong>。</p><p>《JavaScript百炼成仙》是一本以玄幻小说的形式，来讲述JavaScript的知识。</p><p>此篇仅仅是我快速阅读《JavaScript百炼成仙》这本书的笔记，流水账笔记，望君一阅！</p><p>小说的主角为叶小凡【叶小凡，这个名字有点熟悉，也就是玄幻小说中常见主角的名字】，叶小凡是乐阳村中唯一一个具备修行JavaScript的甲等资质的孩子，于是就被送到千鹤派修炼JavaScript。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="javascript基础修炼要诀">《JavaScript基础修炼要诀》<a href="#javascript基础修炼要诀" class="hash-link" aria-label="《JavaScript基础修炼要诀》的直接链接" title="《JavaScript基础修炼要诀》的直接链接">​</a></h2><p>JavaScript是一种神奇的功法，修炼成以后，可以翻山倒海，足以称霸一方天地。</p><p>叶小凡来到千鹤派的青山院，得到一卷功法《JavaScript基础修炼要诀》</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="变量和字面量">变量和字面量<a href="#变量和字面量" class="hash-link" aria-label="变量和字面量的直接链接" title="变量和字面量的直接链接">​</a></h3><p>《JavaScript基础修炼要诀》第一章：直接量，也就是我们常说的字面量，比如数字
字符串、布尔值等等。</p><p>字面量，只是一个值而已，在编程中，无法直接使用字面量。例如：数字5，在编程中是不能单独存在的。</p><p>而是通过定义一个变量来存储字面量。</p><p>变量，则是通过var来定义的，再将字面量赋值给该变量，通过变量来使用字面量。比如：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> num </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">num</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">num</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="数据类型">数据类型<a href="#数据类型" class="hash-link" aria-label="数据类型的直接链接" title="数据类型的直接链接">​</a></h3><p>在编程中，字面量是一种数据。</p><p>数据是分类型的，在JavaScript中，数据分为两种类型：原始数据类型和引用数据类型，有人将原始数据类型称为简单数据类型、引用数据类型称为复杂数据类型；有人将原始数据类型称为原生数据类型，引用数据类型称为对象数据类型。反正都是指向同一个类型，不同的叫法而已。不必过多纠结。</p><p>原始数据类型：number、string、Boolean、null、undefined、symbol和BigInt
引用数据类型：object</p><p>null是一个特殊的关键字，表示空值；
undefined，表示一个变量未定义。</p><p>引用数据类型object，是一种复合数据类型。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="函数">函数<a href="#函数" class="hash-link" aria-label="函数的直接链接" title="函数的直接链接">​</a></h3><p>函数是一组可以重复调用的代码语句，通过function关键字来定义。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="javascript运行机制">JavaScript运行机制<a href="#javascript运行机制" class="hash-link" aria-label="JavaScript运行机制的直接链接" title="JavaScript运行机制的直接链接">​</a></h4><p>JavaScript编译原理：JavaScript代码在运行之前，会经历一个编译过程，分为三个步骤：</p><ol><li>分词，分词的目的就是将代码分解为有意义的代码块；</li><li>解析，JavaScript代码是不能直接运行的，只有通过对代码块进行编译之后才可以被识别，然后再通过JavaScript引擎执行代码逻辑。解析就是对分词后得到的代码块进行解析，生成一棵抽象的语法树。抽象语法树定义了代码本身，通过操作语法树可以准确定位到赋值语句、声明语句和运算语句。</li><li>代码生成，JavaScript引擎把语法树转换成可以执行的代码。比如：</li></ol><p><code>var a = 90</code>，效果如下图：
<img loading="lazy" src="https://img-blog.csdnimg.cn/ad301e6e0a234109b5da86a3893a9b48.png" alt="在这里插入图片描述" class="img_ev3q"></p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="作用域">作用域<a href="#作用域" class="hash-link" aria-label="作用域的直接链接" title="作用域的直接链接">​</a></h4><p>作用域就是在一个范围内查找变量，那么这个范围就是作用域。</p><p>在JavaScript中，作用域分为：全局作用域、函数作用域和块作用域。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="闭包">闭包<a href="#闭包" class="hash-link" aria-label="闭包的直接链接" title="闭包的直接链接">​</a></h4><p>闭包，其实就是函数嵌套，里面的函数可以访问外面函数的变量。</p><p>形成闭包的条件：</p><ol><li>函数内有声明一个函数；</li><li>函数内部的函数调用外部函数的局部变量</li><li>外部函数把内部函数return出去。</li></ol><p>一般情况下，我们在调用一个函数，里面的局部变量会在函数调用之后销毁。这就是全局作用域不能访问函数内部变量的原因。闭包的作用就是让函数的局部变量不随着原函数的销毁而销毁。比如：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">parma</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> parma</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> add </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这样每次在调用内部函数的时候，里面访问的都是同一个变量了。</p><p>使用闭包操作，可以减少很多不必要的全局变量。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="自动执行函数">自动执行函数<a href="#自动执行函数" class="hash-link" aria-label="自动执行函数的直接链接" title="自动执行函数的直接链接">​</a></h4><p>就是在定义之后就立即执行函数，一般是匿名函数。比如上面代码中，做一下修改：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> add </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">parma</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> parma</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">//1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">//2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p> 后面的就是VUE和ES6，关于ES6和VUE还是用单独篇章来记录吧！</p>]]></content:encoded>
            <author>yongyuan253015@gmail.com (读心悦)</author>
            <category>悦读</category>
        </item>
    </channel>
</rss>