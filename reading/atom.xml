<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://duxinyues.github.io/reading</id>
    <title>读心悦 Blog</title>
    <updated>2023-03-20T14:08:58.796Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://duxinyues.github.io/reading"/>
    <subtitle>读心悦 Blog</subtitle>
    <icon>https://duxinyues.github.io/img/logo.jpg</icon>
    <entry>
        <title type="html"><![CDATA[《计算机组成原理》]]></title>
        <id>https://duxinyues.github.io/reading/computerYheory</id>
        <link href="https://duxinyues.github.io/reading/computerYheory"/>
        <updated>2023-03-20T14:08:58.796Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <author>
            <name>读心悦</name>
            <email>yongyuan253015@gmail.com</email>
            <uri>https://github.com/duxinyues/</uri>
        </author>
        <category label="悦读" term="悦读"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[《JavaScript百炼成仙》]]></title>
        <id>https://duxinyues.github.io/reading/JavaScript</id>
        <link href="https://duxinyues.github.io/reading/JavaScript"/>
        <updated>2023-02-19T14:01:20.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p><strong>编程之修，重在积累，而非资质。资质虽然重要，可是后天的努力更不可少</strong>。</p><p>《JavaScript百炼成仙》是一本以玄幻小说的形式，来讲述JavaScript的知识。</p><p>此篇仅仅是我快速阅读《JavaScript百炼成仙》这本书的笔记，流水账笔记，望君一阅！</p><p>小说的主角为叶小凡【叶小凡，这个名字有点熟悉，也就是玄幻小说中常见主角的名字】，叶小凡是乐阳村中唯一一个具备修行JavaScript的甲等资质的孩子，于是就被送到千鹤派修炼JavaScript。</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="javascript基础修炼要诀">《JavaScript基础修炼要诀》<a href="#javascript基础修炼要诀" class="hash-link" aria-label="《JavaScript基础修炼要诀》的直接链接" title="《JavaScript基础修炼要诀》的直接链接">​</a></h2><p>JavaScript是一种神奇的功法，修炼成以后，可以翻山倒海，足以称霸一方天地。</p><p>叶小凡来到千鹤派的青山院，得到一卷功法《JavaScript基础修炼要诀》</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="变量和字面量">变量和字面量<a href="#变量和字面量" class="hash-link" aria-label="变量和字面量的直接链接" title="变量和字面量的直接链接">​</a></h3><p>《JavaScript基础修炼要诀》第一章：直接量，也就是我们常说的字面量，比如数字
字符串、布尔值等等。</p><p>字面量，只是一个值而已，在编程中，无法直接使用字面量。例如：数字5，在编程中是不能单独存在的。</p><p>而是通过定义一个变量来存储字面量。</p><p>变量，则是通过var来定义的，再将字面量赋值给该变量，通过变量来使用字面量。比如：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> num </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">num</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">num</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="数据类型">数据类型<a href="#数据类型" class="hash-link" aria-label="数据类型的直接链接" title="数据类型的直接链接">​</a></h3><p>在编程中，字面量是一种数据。</p><p>数据是分类型的，在JavaScript中，数据分为两种类型：原始数据类型和引用数据类型，有人将原始数据类型称为简单数据类型、引用数据类型称为复杂数据类型；有人将原始数据类型称为原生数据类型，引用数据类型称为对象数据类型。反正都是指向同一个类型，不同的叫法而已。不必过多纠结。</p><p>原始数据类型：number、string、Boolean、null、undefined、symbol和BigInt
引用数据类型：object</p><p>null是一个特殊的关键字，表示空值；
undefined，表示一个变量未定义。</p><p>引用数据类型object，是一种复合数据类型。</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="函数">函数<a href="#函数" class="hash-link" aria-label="函数的直接链接" title="函数的直接链接">​</a></h3><p>函数是一组可以重复调用的代码语句，通过function关键字来定义。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="javascript运行机制">JavaScript运行机制<a href="#javascript运行机制" class="hash-link" aria-label="JavaScript运行机制的直接链接" title="JavaScript运行机制的直接链接">​</a></h4><p>JavaScript编译原理：JavaScript代码在运行之前，会经历一个编译过程，分为三个步骤：</p><ol><li>分词，分词的目的就是将代码分解为有意义的代码块；</li><li>解析，JavaScript代码是不能直接运行的，只有通过对代码块进行编译之后才可以被识别，然后再通过JavaScript引擎执行代码逻辑。解析就是对分词后得到的代码块进行解析，生成一棵抽象的语法树。抽象语法树定义了代码本身，通过操作语法树可以准确定位到赋值语句、声明语句和运算语句。</li><li>代码生成，JavaScript引擎把语法树转换成可以执行的代码。比如：</li></ol><p><code>var a = 90</code>，效果如下图：
<img loading="lazy" src="https://img-blog.csdnimg.cn/ad301e6e0a234109b5da86a3893a9b48.png" alt="在这里插入图片描述" class="img_ev3q"></p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="作用域">作用域<a href="#作用域" class="hash-link" aria-label="作用域的直接链接" title="作用域的直接链接">​</a></h4><p>作用域就是在一个范围内查找变量，那么这个范围就是作用域。</p><p>在JavaScript中，作用域分为：全局作用域、函数作用域和块作用域。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="闭包">闭包<a href="#闭包" class="hash-link" aria-label="闭包的直接链接" title="闭包的直接链接">​</a></h4><p>闭包，其实就是函数嵌套，里面的函数可以访问外面函数的变量。</p><p>形成闭包的条件：</p><ol><li>函数内有声明一个函数；</li><li>函数内部的函数调用外部函数的局部变量</li><li>外部函数把内部函数return出去。</li></ol><p>一般情况下，我们在调用一个函数，里面的局部变量会在函数调用之后销毁。这就是全局作用域不能访问函数内部变量的原因。闭包的作用就是让函数的局部变量不随着原函数的销毁而销毁。比如：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">parma</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> parma</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> add </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这样每次在调用内部函数的时候，里面访问的都是同一个变量了。</p><p>使用闭包操作，可以减少很多不必要的全局变量。</p><h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="自动执行函数">自动执行函数<a href="#自动执行函数" class="hash-link" aria-label="自动执行函数的直接链接" title="自动执行函数的直接链接">​</a></h4><p>就是在定义之后就立即执行函数，一般是匿名函数。比如上面代码中，做一下修改：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> add </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">parma</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> parma</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">//1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">//2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p> 后面的就是VUE和ES6，关于ES6和VUE还是用单独篇章来记录吧！</p>]]></content>
        <author>
            <name>读心悦</name>
            <email>yongyuan253015@gmail.com</email>
            <uri>https://github.com/duxinyues/</uri>
        </author>
        <category label="悦读" term="悦读"/>
    </entry>
</feed>